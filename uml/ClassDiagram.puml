@startuml
package "Database Handling" {
    class SqliteDatabaseHandler {
        -sqlite3* pDB
        -sqlite3_stmt* stmt
        -bool errorStatus
        -Row row
        -Table table
        -string columnName
        -string columnValue
        -int columnCount
        -shared_ptr<IniReader> iniReader

        +openDb(string dbPath)
        +setConfigFile(string confFilePath)
        +prepareQuery(string query)
        +addParameter(int index, string value)
        +execute()
        +fetch() : Row
        +fetchAll() : Table
        +getErrorStatus() : bool

        {static} +SqliteDatabaseHandler()
        {static} +SqliteDatabaseHandler(string dbPath)
        {static} +~SqliteDatabaseHandler()
    }

    class DatabaseHandler {
        ..Pure virtual class methods..
    }

    SqliteDatabaseHandler --|> DatabaseHandler
}

package "Models" {
    class Customer {
        -int Id
        -string Name
        -string LastName
        -string EmailAddress

        +Customer()
        +~Customer()
        +getId() : int
        +getName() : string
        +getLastName() : string
        +getEmailAddress() : string
        +setId(int id)
        +setName(const string &name)
        +setLastName(const string &lastName)
        +setEmailAddress(const string &address)
    }

    class Game {
        -int Id
        -string Name

        +Game()
        +~Game()
        +getId() : int
        +getName() : string
        +setId(int id)
        +setName(const string &name)
    }
}

class ClassHandler {
    -SqliteDatabaseHandler* Database
    -Customer tCustomer
    -Game tGame
    -string query

    +AddCustomer(Customer &tCustomer)
    +EditCustomer(Customer &tCustomer)
    +DeleteCustomer(Customer &tCustomer)
    +SearchCustomer(string value) : Customer
    +ListCustomers() : Table

    +AddGame(Game &tGame)
    +EditGame(Game &tGame)
    +DeleteGame(Game &tGame)
    +SearchGame(string value) : Game
    +ListGames() : Table
    
    +JoinQuerys(bool selection) : Table

    +ClassHandler(SqliteDatabaseHandler &db)
    +~ClassHandler()
}

package "UI Handling" {
    class SpanishUiMessages {
        +menuMessage : string
        +operationAsk : string
        +exitMessage : string
        +invalidOption : string
        +Confirmation : string
        +EmpyTable : string
        +addName : string
        +addLastName : string
        +addEmail : string
        +IDmessage : string
        +EditConfirmation1 : string
        +searchMessage : string
        +CxName : string
        +CxLastName : string
        +CxEmail : string
        +delConfirmation : string
        +addGameName : string
        +gameIDmessage : string
        +editGameConfirmation : string
        +searchGameMessage : string
        +gameNameMessage : string
        +delGameConfirmation : string
    }

    class ui {
        -std::map<std::string, std::function<void()>> Operations
        -ClassHandler* OpManager

        +AddCustomer()
        +EditCustomer()
        +DeleteCustomer()
        +ListCustomers()
        +SearchCustomer() : Customer
        +AddGame()
        +EditGame()
        +DeleteGame()
        +ListGames()
        +SearchGame() : Game
        +printTable(const Table& table)
        +showMenu()
        +processOperation()
        +showGamesPerCustomer()
        +showCustomersPerGame()

        +ui(SqliteDatabaseHandler &dbHandler)
        +~ui()
    }
}

' Relaciones de composición y agregación
ClassHandler --> SqliteDatabaseHandler : uses
ClassHandler *- Customer : manages
ClassHandler *- Game : manages
ui o-- ClassHandler : uses
@enduml